import time

cherrypy.config.u   pdate({'server.socket_host': '10.0.0.53' } ) # Pub IP
cherrypy.config.update({'server.socket_port': 9999})
cherrypy.config.update({'tools.caching.on' :False})
cherrypy.config.update({'tools.timeout.time': mins})

cherrypy.engine.autoreload.files.add("/home/bundito/Downloads")
cherrypy.engine.autoreload.frequency = 1

cherrypy.process.plugins.Monitor(cherrypy.engine.shutdown, frequency = 10)

mins = sys.argv[-2]
if sys.argv[1] not "-m" or sys.argv[1] not "--minutes":
    pass
else:
    m = Monitor()
    m.callback = Countdown
    m.frequency = 10
    self.name = name
    c = Countdown(mins)


class Monitor(SimplePlugin):
    SimplePlugin.__init__(self, bus):
        self.callback = Countdown
        self.frequency = 10
        self.name = name

    def start(self):
        """Start our callback in its own background thread."""
        if self.frequency > 0:
            threadname = self.name or self.__class__.__name__
            if self.thread is None:
                self.thread = BackgroundTask(self.frequency, self.callback,
                                             bus=self.bus)
                self.thread.setName(threadname)
                self.thread.start()
                self.bus.log('Started monitor thread %r.' % threadname)
            else:
                self.bus.log('Monitor thread %r already started.' % threadname)

    def stop(self):
        """Stop our callback's background task thread."""
        if self.thread is None:
            self.bus.log('No thread running for %s.' %
                         self.name or self.__class__.__name__)
        else:
            if self.thread is not threading.currentThread():
                name = self.thread.getName()
                self.thread.cancel()
                if not self.thread.daemon:
                    self.bus.log('Joining %r' % name)
                    self.thread.join()
                self.bus.log('Stopped thread %r.' % name)
            self.thread = None

     def graceful(self):
        """Stop the callback's background task thread and restart it."""
        self.stop()
        self.start()

# shutdown the server after {x} minutes of inactivity
class Countdown(SimplePlugin, mins):
    SimplePlugin__init__(self, bus):

        def __init__(self):
            seconds = mins * 60
            m = Monitor(self, 10, self.check_countdown(curr_time))
            last_served_time = time.gmtime

        def exempt(self):
            # this request does not count against the countdown
                if request_type == "exempt":
                    self.bus.log("Exempt request called.")
                    return
                else:
                    self.bus.log("Valid request. Resetting countdown.")
                    self.last_served_time = time.gmtime
                    return

         def check_countdown(self, curr_time):
            curr_time = time.gmtime
            diff = curr_time - last_served_time
            if diff > seconds:
                self.bus.log("Countdown expired. Stopping server.")
                cherrypy.engine.exit()


        def valid(self)
            self.bus.log("Valid request. Resetting countdown.")
                    self.last_served_time = time.gmtime
                    return